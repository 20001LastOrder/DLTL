package DLTL.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Set;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public final class TestWorkbench__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4eae4a27L, "DLTL.structure.TestWorkbench");

  public static final SMethod<List<SNode>> getReferencedModels_idGAenPgMYjW = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getReferencedModels").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("GAenPgMYjW").build();
  public static final SMethod<List<SNode>> getReferencedDatasets_idGAenPgRq8T = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getReferencedDatasets").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("GAenPgRq8T").build();
  public static final SMethod<List<SNode>> getReferencedMetrics_idGAenPgV8p2 = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getReferencedMetrics").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("GAenPgV8p2").build();
  public static final SMethod<String> getParametersForExpression_idGAenPgYTt3 = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getParametersForExpression").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("GAenPgYTt3").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> dfsForModels_idGAenPgN4xa = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("dfsForModels").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("GAenPgN4xa").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<Set<SNode>>) ((Class) Object.class), ""));
  public static final SMethod<Void> dfsForDatasets_idGAenPgRqK3 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("dfsForDatasets").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("GAenPgRqK3").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<Set<SNode>>) ((Class) Object.class), ""));
  public static final SMethod<Void> dfsForMetrics_idGAenPgV8Uf = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("dfsForMetrics").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("GAenPgV8Uf").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<Set<SNode>>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getReferencedModels_idGAenPgMYjW, getReferencedDatasets_idGAenPgRq8T, getReferencedMetrics_idGAenPgV8p2, getParametersForExpression_idGAenPgYTt3, dfsForModels_idGAenPgN4xa, dfsForDatasets_idGAenPgRqK3, dfsForMetrics_idGAenPgV8Uf);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static List<SNode> getReferencedModels_idGAenPgMYjW(@NotNull SNode __thisNode__) {
    Set<SNode> set = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode predicate : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.tests$h9vU))) {
      TestWorkbench__BehaviorDescriptor.dfsForModels_idGAenPgN4xa.invoke(__thisNode__, SLinkOperations.getTarget(predicate, LINKS.expression$yAf5), set);
    }
    return SetSequence.fromSet(set).toListSequence();
  }
  /*package*/ static List<SNode> getReferencedDatasets_idGAenPgRq8T(@NotNull SNode __thisNode__) {
    Set<SNode> set = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode predicate : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.tests$h9vU))) {
      TestWorkbench__BehaviorDescriptor.dfsForDatasets_idGAenPgRqK3.invoke(__thisNode__, SLinkOperations.getTarget(predicate, LINKS.expression$yAf5), set);
    }
    return SetSequence.fromSet(set).toListSequence();
  }
  /*package*/ static List<SNode> getReferencedMetrics_idGAenPgV8p2(@NotNull SNode __thisNode__) {
    Set<SNode> set = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode predicate : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.tests$h9vU))) {
      TestWorkbench__BehaviorDescriptor.dfsForMetrics_idGAenPgV8Uf.invoke(__thisNode__, SLinkOperations.getTarget(predicate, LINKS.expression$yAf5), set);
    }
    return SetSequence.fromSet(set).toListSequence();
  }
  /*package*/ static String getParametersForExpression_idGAenPgYTt3(@NotNull SNode __thisNode__, SNode expression) {
    Set<SNode> modelSet = SetSequence.fromSet(new HashSet<SNode>());
    Set<SNode> datasetSet = SetSequence.fromSet(new HashSet<SNode>());
    TestWorkbench__BehaviorDescriptor.dfsForModels_idGAenPgN4xa.invoke(__thisNode__, expression, modelSet);
    TestWorkbench__BehaviorDescriptor.dfsForDatasets_idGAenPgRqK3.invoke(__thisNode__, expression, datasetSet);
    List<String> parameters = ListSequence.fromList(new ArrayList<String>());

    for (SNode model : SetSequence.fromSet(modelSet)) {
      ListSequence.fromList(parameters).addElement(SPropertyOperations.getString(model, PROPS.name$MnvL));
    }

    for (SNode dataset : SetSequence.fromSet(datasetSet)) {
      ListSequence.fromList(parameters).addElement(SPropertyOperations.getString(dataset, PROPS.name$MnvL));
    }

    return String.join(",", parameters);
  }
  /*package*/ static void dfsForModels_idGAenPgN4xa(@NotNull SNode __thisNode__, SNode node, Set<SNode> set) {
    if (node == null) {
      return;
    }
    if (SNodeOperations.isInstanceOf(node, CONCEPTS.BinaryExpression$Fj)) {
      TestWorkbench__BehaviorDescriptor.dfsForModels_idGAenPgN4xa.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(node, CONCEPTS.BinaryExpression$Fj), LINKS.left$CP7_), set);
      TestWorkbench__BehaviorDescriptor.dfsForModels_idGAenPgN4xa.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(node, CONCEPTS.BinaryExpression$Fj), LINKS.right$CP_B), set);
    } else if (SNodeOperations.isInstanceOf(node, CONCEPTS.NotOperation$Ml)) {
      TestWorkbench__BehaviorDescriptor.dfsForModels_idGAenPgN4xa.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(node, CONCEPTS.NotOperation$Ml), LINKS.expression$1SC_), set);
    } else if (SNodeOperations.isInstanceOf(node, CONCEPTS.MetricRef$s4)) {
      for (SNode model : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(node, CONCEPTS.MetricRef$s4), LINKS.models$gqB0))) {
        SetSequence.fromSet(set).addElement(SLinkOperations.getTarget(model, LINKS.ref$2O4z));
      }
    }
  }
  /*package*/ static void dfsForDatasets_idGAenPgRqK3(@NotNull SNode __thisNode__, SNode node, Set<SNode> set) {
    if (node == null) {
      return;
    }
    if (SNodeOperations.isInstanceOf(node, CONCEPTS.BinaryExpression$Fj)) {
      TestWorkbench__BehaviorDescriptor.dfsForDatasets_idGAenPgRqK3.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(node, CONCEPTS.BinaryExpression$Fj), LINKS.left$CP7_), set);
      TestWorkbench__BehaviorDescriptor.dfsForDatasets_idGAenPgRqK3.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(node, CONCEPTS.BinaryExpression$Fj), LINKS.right$CP_B), set);
    } else if (SNodeOperations.isInstanceOf(node, CONCEPTS.NotOperation$Ml)) {
      TestWorkbench__BehaviorDescriptor.dfsForDatasets_idGAenPgRqK3.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(node, CONCEPTS.NotOperation$Ml), LINKS.expression$1SC_), set);
    } else if (SNodeOperations.isInstanceOf(node, CONCEPTS.MetricRef$s4)) {
      for (SNode dataset : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(node, CONCEPTS.MetricRef$s4), LINKS.datasets$gwfo))) {
        SetSequence.fromSet(set).addElement(SLinkOperations.getTarget(dataset, LINKS.ref$9om5));
      }
    }
  }
  /*package*/ static void dfsForMetrics_idGAenPgV8Uf(@NotNull SNode __thisNode__, SNode node, Set<SNode> set) {
    if (node == null) {
      return;
    }
    if (SNodeOperations.isInstanceOf(node, CONCEPTS.BinaryExpression$Fj)) {
      TestWorkbench__BehaviorDescriptor.dfsForMetrics_idGAenPgV8Uf.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(node, CONCEPTS.BinaryExpression$Fj), LINKS.left$CP7_), set);
      TestWorkbench__BehaviorDescriptor.dfsForMetrics_idGAenPgV8Uf.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(node, CONCEPTS.BinaryExpression$Fj), LINKS.right$CP_B), set);
    } else if (SNodeOperations.isInstanceOf(node, CONCEPTS.NotOperation$Ml)) {
      TestWorkbench__BehaviorDescriptor.dfsForMetrics_idGAenPgV8Uf.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(node, CONCEPTS.NotOperation$Ml), LINKS.expression$1SC_), set);
    } else if (SNodeOperations.isInstanceOf(node, CONCEPTS.MetricRef$s4)) {
      SetSequence.fromSet(set).addElement(SLinkOperations.getTarget(SNodeOperations.cast(node, CONCEPTS.MetricRef$s4), LINKS.ref$cdw5));
    }
  }

  /*package*/ TestWorkbench__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((List<SNode>) getReferencedModels_idGAenPgMYjW(node));
      case 1:
        return (T) ((List<SNode>) getReferencedDatasets_idGAenPgRq8T(node));
      case 2:
        return (T) ((List<SNode>) getReferencedMetrics_idGAenPgV8p2(node));
      case 3:
        return (T) ((String) getParametersForExpression_idGAenPgYTt3(node, (SNode) parameters[0]));
      case 4:
        dfsForModels_idGAenPgN4xa(node, (SNode) parameters[0], (Set<SNode>) parameters[1]);
        return null;
      case 5:
        dfsForDatasets_idGAenPgRqK3(node, (SNode) parameters[0], (Set<SNode>) parameters[1]);
        return null;
      case 6:
        dfsForMetrics_idGAenPgV8Uf(node, (SNode) parameters[0], (Set<SNode>) parameters[1]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expression$yAf5 = MetaAdapterFactory.getContainmentLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec9613eL, 0x6a7de6ab4ec9613fL, "expression");
    /*package*/ static final SContainmentLink tests$h9vU = MetaAdapterFactory.getContainmentLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4eae4a27L, 0x4c6662695c19f9a9L, "tests");
    /*package*/ static final SContainmentLink left$CP7_ = MetaAdapterFactory.getContainmentLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec961b0L, 0x6a7de6ab4ec961b1L, "left");
    /*package*/ static final SContainmentLink right$CP_B = MetaAdapterFactory.getContainmentLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec961b0L, 0x6a7de6ab4ec961b3L, "right");
    /*package*/ static final SContainmentLink expression$1SC_ = MetaAdapterFactory.getContainmentLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4c6662695c1407e7L, 0x4c6662695c1407e8L, "expression");
    /*package*/ static final SReferenceLink ref$2O4z = MetaAdapterFactory.getReferenceLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4eae4a88L, 0x6a7de6ab4eae4a92L, "ref");
    /*package*/ static final SContainmentLink models$gqB0 = MetaAdapterFactory.getContainmentLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4c6662695c18d102L, 0x4c6662695c18d1a3L, "models");
    /*package*/ static final SReferenceLink ref$9om5 = MetaAdapterFactory.getReferenceLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4c6662695c18d0e0L, 0x4c6662695c18d0e1L, "ref");
    /*package*/ static final SContainmentLink datasets$gwfo = MetaAdapterFactory.getContainmentLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4c6662695c18d102L, 0x4c6662695c18d1a6L, "datasets");
    /*package*/ static final SReferenceLink ref$cdw5 = MetaAdapterFactory.getReferenceLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4c6662695c18d102L, 0x4c6662695c18d103L, "ref");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BinaryExpression$Fj = MetaAdapterFactory.getConcept(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec961b0L, "DLTL.structure.BinaryExpression");
    /*package*/ static final SConcept NotOperation$Ml = MetaAdapterFactory.getConcept(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4c6662695c1407e7L, "DLTL.structure.NotOperation");
    /*package*/ static final SConcept MetricRef$s4 = MetaAdapterFactory.getConcept(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4c6662695c18d102L, "DLTL.structure.MetricRef");
  }
}
