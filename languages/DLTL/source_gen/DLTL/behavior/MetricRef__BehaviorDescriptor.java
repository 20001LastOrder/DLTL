package DLTL.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class MetricRef__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4c6662695c18d102L, "DLTL.structure.MetricRef");

  public static final SMethod<String> transform_idGAenPgHvX3 = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("transform").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("GAenPgHvX3").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(transform_idGAenPgHvX3);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String transform_idGAenPgHvX3(@NotNull SNode __thisNode__) {
    StringBuilder sb = new StringBuilder();
    sb.append("cal_").append(SPropertyOperations.getString(SLinkOperations.getTarget(__thisNode__, LINKS.ref$cdw5), PROPS.name$MnvL)).append("(");
    for (SNode ref : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.models$gqB0))) {
      sb.append(SPropertyOperations.getString(SLinkOperations.getTarget(ref, LINKS.ref$2O4z), PROPS.name$MnvL).toLowerCase()).append(", ");
    }

    for (SNode ref : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.datasets$gwfo))) {
      sb.append(SPropertyOperations.getString(SLinkOperations.getTarget(ref, LINKS.ref$9om5), PROPS.name$MnvL).toLowerCase()).append(", ");
    }

    for (SNode ref : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.inputs$gxbs))) {
      sb.append(SPropertyOperations.getString(ref, PROPS.value$D_zu)).append(", ");
    }
    if (sb.indexOf(", ") >= 0) {
      sb.delete(sb.length() - 2, sb.length());
    }
    sb.append(")");
    return sb.toString();
  }

  /*package*/ MetricRef__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) transform_idGAenPgHvX3(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink ref$cdw5 = MetaAdapterFactory.getReferenceLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4c6662695c18d102L, 0x4c6662695c18d103L, "ref");
    /*package*/ static final SReferenceLink ref$2O4z = MetaAdapterFactory.getReferenceLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4eae4a88L, 0x6a7de6ab4eae4a92L, "ref");
    /*package*/ static final SContainmentLink models$gqB0 = MetaAdapterFactory.getContainmentLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4c6662695c18d102L, 0x4c6662695c18d1a3L, "models");
    /*package*/ static final SReferenceLink ref$9om5 = MetaAdapterFactory.getReferenceLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4c6662695c18d0e0L, 0x4c6662695c18d0e1L, "ref");
    /*package*/ static final SContainmentLink datasets$gwfo = MetaAdapterFactory.getContainmentLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4c6662695c18d102L, 0x4c6662695c18d1a6L, "datasets");
    /*package*/ static final SContainmentLink inputs$gxbs = MetaAdapterFactory.getContainmentLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4c6662695c18d102L, 0x4c6662695c18d1aaL, "inputs");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty value$D_zu = MetaAdapterFactory.getProperty(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x2cdd0678a4e30d59L, 0x2cdd0678a4e30d5eL, "value");
  }
}
