package DLTL.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class BinaryComparason__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec961b7L, "DLTL.structure.BinaryComparason");

  public static final SMethod<String> transform_idGAenPgHvX3 = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("transform").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("GAenPgHvX3").build();
  /*package*/ static final SMethod<String> getComparator_idGAenPgGUiQ = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getComparator").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("GAenPgGUiQ").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(transform_idGAenPgHvX3, getComparator_idGAenPgGUiQ);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String transform_idGAenPgHvX3(@NotNull SNode __thisNode__) {
    return "(" + Expression__BehaviorDescriptor.transform_idGAenPgHvX3.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.left$CP7_)) + " " + BinaryComparason__BehaviorDescriptor.getComparator_idGAenPgGUiQ.invoke(__thisNode__) + " " + Expression__BehaviorDescriptor.transform_idGAenPgHvX3.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.left$CP7_)) + ")";
  }
  /*package*/ static String getComparator_idGAenPgGUiQ(@NotNull SNode __thisNode__) {
    if (SPropertyOperations.getEnum(__thisNode__, PROPS.comparator$Dc5E) == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec961b8L, "DLTL.structure.Comparator"), 0x6a7de6ab4ec961b9L, "equal")) {
      return "==";
    } else if (SPropertyOperations.getEnum(__thisNode__, PROPS.comparator$Dc5E) == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec961b8L, "DLTL.structure.Comparator"), 0x6a7de6ab4ec961baL, "largerThan")) {
      return ">";
    } else if (SPropertyOperations.getEnum(__thisNode__, PROPS.comparator$Dc5E) == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec961b8L, "DLTL.structure.Comparator"), 0x6a7de6ab4ec961c1L, "largetThanOrEqual")) {
      return ">= ";
    } else if (SPropertyOperations.getEnum(__thisNode__, PROPS.comparator$Dc5E) == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec961b8L, "DLTL.structure.Comparator"), 0x6a7de6ab4ec961ccL, "notEqual")) {
      return "!=";
    } else if (SPropertyOperations.getEnum(__thisNode__, PROPS.comparator$Dc5E) == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec961b8L, "DLTL.structure.Comparator"), 0x6a7de6ab4ec961bdL, "smallerThan")) {
      return "<";
    } else {
      return "<=";
    }
  }

  /*package*/ BinaryComparason__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) transform_idGAenPgHvX3(node));
      case 1:
        return (T) ((String) getComparator_idGAenPgGUiQ(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink left$CP7_ = MetaAdapterFactory.getContainmentLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec961b0L, 0x6a7de6ab4ec961b1L, "left");
  }

  private static final class PROPS {
    /*package*/ static final SProperty comparator$Dc5E = MetaAdapterFactory.getProperty(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec961b7L, 0x6a7de6ab4ec961d3L, "comparator");
  }
}
