package DLTL.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_TestWorkbench_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_TestWorkbench_NonTypesystemRule() {
  }
  public void applyRule(final SNode testWorkbench, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    for (SNode line : ListSequence.fromList(SLinkOperations.getChildren(testWorkbench, LINKS.imports$$fl_))) {
      if (!(SPropertyOperations.getString(line, PROPS.content$gtR_).matches("^(import|from) ([A-Za-z1-9-_]+\\.)*[A-Za-z1-9-_]+( (import|as) [A-Za-z1-9-_]+)?"))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(line, "Not an import expression", "r:d1f31453-10d3-4b60-8f44-ef5976d0d9fe(DLTL.typesystem)", "803392793923881916", null, errorTarget);
        }
      }
    }

  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.TestWorkbench$b6;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty content$gtR_ = MetaAdapterFactory.getProperty(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4ec8f747d179adb5L, 0x4ec8f747d179adb6L, "content");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink imports$$fl_ = MetaAdapterFactory.getContainmentLink(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4eae4a27L, 0xb26397d50adfe36L, "imports");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TestWorkbench$b6 = MetaAdapterFactory.getConcept(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4eae4a27L, "DLTL.structure.TestWorkbench");
  }
}
