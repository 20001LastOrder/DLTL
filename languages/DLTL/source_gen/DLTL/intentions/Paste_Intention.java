package DLTL.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Paste_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public Paste_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:153173f5-3d2b-4f0a-8b63-0fb7564dedb5(DLTL.intentions)", "5677059218130707650"));
  }
  @Override
  public String getPresentation() {
    return "Paste";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Paste";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      String content = Utils.getClipboardContent();
      content = content.replace("\t", "    ");
      String[] lines = content.split("\n");
      if (lines.length == 0) {
        return;
      }

      SPropertyOperations.assign(node, PROPS.content$gtR_, lines[0]);
      SNode itr = node;
      for (int i = 1; i < lines.length; i++) {
        SNode sibling = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4ec8f747d179adb5L, "DLTL.structure.TextLine"));
        SPropertyOperations.assign(sibling, PROPS.content$gtR_, lines[i]);
        SNodeOperations.insertNextSiblingChild(itr, sibling);
        itr = SNodeOperations.getNextSibling(itr);
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return Paste_Intention.this;
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty content$gtR_ = MetaAdapterFactory.getProperty(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x4ec8f747d179adb5L, 0x4ec8f747d179adb6L, "content");
  }
}
