package DLTL.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Argument = 0;
  public static final int BinaryBooleanExpression = 1;
  public static final int BinaryComparason = 2;
  public static final int BinaryConnection = 3;
  public static final int BinaryExpression = 4;
  public static final int BinaryOperation = 5;
  public static final int BooleanConstant = 6;
  public static final int Constant = 7;
  public static final int Dataset = 8;
  public static final int DatasetRef = 9;
  public static final int Expression = 10;
  public static final int FloatConstant = 11;
  public static final int IntegerConstant = 12;
  public static final int Metric = 13;
  public static final int MetricRef = 14;
  public static final int Model = 15;
  public static final int ModelRef = 16;
  public static final int NotOperation = 17;
  public static final int Parameter = 18;
  public static final int Predicate = 19;
  public static final int SingleValue = 20;
  public static final int Specification = 21;
  public static final int TestWorkbench = 22;
  public static final int TextLine = 23;
  public static final int UnaryExpression = 24;
  public static final int Variable = 25;
  public static final int VariableReference = 26;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L);
    builder.put(0x2cdd0678a4e30d59L, Argument);
    builder.put(0x2cdd0678a4f14604L, BinaryBooleanExpression);
    builder.put(0x6a7de6ab4ec961b7L, BinaryComparason);
    builder.put(0x6a7de6ab4ec961e4L, BinaryConnection);
    builder.put(0x6a7de6ab4ec961b0L, BinaryExpression);
    builder.put(0x6a7de6ab4ec961d5L, BinaryOperation);
    builder.put(0x6a7de6ab4ec96ee7L, BooleanConstant);
    builder.put(0x6a7de6ab4ec961f1L, Constant);
    builder.put(0x6a7de6ab4eae4a4aL, Dataset);
    builder.put(0x4c6662695c18d0e0L, DatasetRef);
    builder.put(0x6a7de6ab4ec961b6L, Expression);
    builder.put(0x6a7de6ab4ec96e65L, FloatConstant);
    builder.put(0x6a7de6ab4ec96e62L, IntegerConstant);
    builder.put(0x4c6662695c17d211L, Metric);
    builder.put(0x4c6662695c18d102L, MetricRef);
    builder.put(0x6a7de6ab4ea8cb72L, Model);
    builder.put(0x6a7de6ab4eae4a88L, ModelRef);
    builder.put(0x4c6662695c1407e7L, NotOperation);
    builder.put(0x6a7de6ab4eae4aaaL, Parameter);
    builder.put(0x6a7de6ab4ec9613eL, Predicate);
    builder.put(0x2cdd0678a503bdf0L, SingleValue);
    builder.put(0x6a7de6ab4ec96ef5L, Specification);
    builder.put(0x6a7de6ab4eae4a27L, TestWorkbench);
    builder.put(0x4ec8f747d179adb5L, TextLine);
    builder.put(0x6a7de6ab4ed21380L, UnaryExpression);
    builder.put(0x6a7de6ab4ec96eebL, Variable);
    builder.put(0x6a7de6ab4ec961f0L, VariableReference);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
