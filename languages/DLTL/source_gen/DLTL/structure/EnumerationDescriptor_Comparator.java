package DLTL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.EnumerationDescriptorBase;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import java.util.List;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;

public class EnumerationDescriptor_Comparator extends EnumerationDescriptorBase {

  public EnumerationDescriptor_Comparator() {
    super(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec961b8L, "Comparator", "r:892f7aaa-1f94-4be5-a872-740f44068c69(DLTL.structure)/7673542963544809912");
  }

  private final EnumerationDescriptor.MemberDescriptor myMember_equal_0 = new EnumerationDescriptor.MemberDescriptor("equal", "equal", 0x6a7de6ab4ec961b9L, "r:892f7aaa-1f94-4be5-a872-740f44068c69(DLTL.structure)/7673542963544809913");
  private final EnumerationDescriptor.MemberDescriptor myMember_largerThan_0 = new EnumerationDescriptor.MemberDescriptor("largerThan", "larger than", 0x6a7de6ab4ec961baL, "r:892f7aaa-1f94-4be5-a872-740f44068c69(DLTL.structure)/7673542963544809914");
  private final EnumerationDescriptor.MemberDescriptor myMember_smallerThan_0 = new EnumerationDescriptor.MemberDescriptor("smallerThan", "smaller than", 0x6a7de6ab4ec961bdL, "r:892f7aaa-1f94-4be5-a872-740f44068c69(DLTL.structure)/7673542963544809917");
  private final EnumerationDescriptor.MemberDescriptor myMember_largetThanOrEqual_0 = new EnumerationDescriptor.MemberDescriptor("largetThanOrEqual", "larger than or equal", 0x6a7de6ab4ec961c1L, "r:892f7aaa-1f94-4be5-a872-740f44068c69(DLTL.structure)/7673542963544809921");
  private final EnumerationDescriptor.MemberDescriptor myMember_smallerThanOrEqual_0 = new EnumerationDescriptor.MemberDescriptor("smallerThanOrEqual", "smaller than or equal", 0x6a7de6ab4ec961c6L, "r:892f7aaa-1f94-4be5-a872-740f44068c69(DLTL.structure)/7673542963544809926");
  private final EnumerationDescriptor.MemberDescriptor myMember_notEqual_0 = new EnumerationDescriptor.MemberDescriptor("notEqual", "not equal", 0x6a7de6ab4ec961ccL, "r:892f7aaa-1f94-4be5-a872-740f44068c69(DLTL.structure)/7673542963544809932");

  private final EnumerationLiteralsIndex myIndex = EnumerationLiteralsIndex.build(0x91a99801f144985L, 0xb06a9c8c7ccee4a2L, 0x6a7de6ab4ec961b8L, 0x6a7de6ab4ec961b9L, 0x6a7de6ab4ec961baL, 0x6a7de6ab4ec961bdL, 0x6a7de6ab4ec961c1L, 0x6a7de6ab4ec961c6L, 0x6a7de6ab4ec961ccL);
  private final List<EnumerationDescriptor.MemberDescriptor> myMembers = new EnumerationDescriptorBase.MembersList(myIndex, myMember_equal_0, myMember_largerThan_0, myMember_smallerThan_0, myMember_largetThanOrEqual_0, myMember_smallerThanOrEqual_0, myMember_notEqual_0);

  @Nullable
  @Override
  public EnumerationDescriptor.MemberDescriptor getDefault() {
    return myMember_equal_0;
  }

  @NotNull
  @Override
  public List<EnumerationDescriptor.MemberDescriptor> getMembers() {
    return myMembers;
  }

  @Nullable
  @Override
  public EnumerationDescriptor.MemberDescriptor getMember(@Nullable String memberName) {
    if (memberName == null) {
      return null;
    }
    switch (memberName) {
      case "equal":
        return myMember_equal_0;
      case "largerThan":
        return myMember_largerThan_0;
      case "smallerThan":
        return myMember_smallerThan_0;
      case "largetThanOrEqual":
        return myMember_largetThanOrEqual_0;
      case "smallerThanOrEqual":
        return myMember_smallerThanOrEqual_0;
      case "notEqual":
        return myMember_notEqual_0;
    }
    return null;
  }

  @Nullable
  @Override
  public EnumerationDescriptor.MemberDescriptor getMember(long idValue) {
    int index = myIndex.index(idValue);
    if (index == -1) {
      return null;
    }
    return myMembers.get(index);
  }
}
