package SpecificationLogicLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BinaryComparation_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new BinaryConnection_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new BinaryOperation_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new BooleanConstant_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new FloatConstant_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new IntegerConstant_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new NotOperation_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Predicate_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Variable_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new VariableReference_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new BinaryExpression_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new VariableReference_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredNamedSubstituteMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        if (true) {
          switch (menuId.getFqName()) {
            case "SpecificationLogicLanguage.editor.SingleValue":
              return Arrays.asList(new SubstituteMenu[]{new SingleValue()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b7L), MetaIdFactory.conceptId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961e4L), MetaIdFactory.conceptId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961d5L), MetaIdFactory.conceptId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec96ee7L), MetaIdFactory.conceptId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec96e65L), MetaIdFactory.conceptId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec96e62L), MetaIdFactory.conceptId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x4c6662695c1407e7L), MetaIdFactory.conceptId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec9613eL), MetaIdFactory.conceptId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec96eebL), MetaIdFactory.conceptId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961f0L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b0L), MetaIdFactory.conceptId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961f0L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b6L)).seal();
}
