package SpecificationLogicLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBinaryComparation = createDescriptorForBinaryComparation();
  /*package*/ final ConceptDescriptor myConceptBinaryConnection = createDescriptorForBinaryConnection();
  /*package*/ final ConceptDescriptor myConceptBinaryExpression = createDescriptorForBinaryExpression();
  /*package*/ final ConceptDescriptor myConceptBinaryOperation = createDescriptorForBinaryOperation();
  /*package*/ final ConceptDescriptor myConceptBooleanConstant = createDescriptorForBooleanConstant();
  /*package*/ final ConceptDescriptor myConceptConstant = createDescriptorForConstant();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptFloatConstant = createDescriptorForFloatConstant();
  /*package*/ final ConceptDescriptor myConceptIntegerConstant = createDescriptorForIntegerConstant();
  /*package*/ final ConceptDescriptor myConceptNotOperation = createDescriptorForNotOperation();
  /*package*/ final ConceptDescriptor myConceptPredicate = createDescriptorForPredicate();
  /*package*/ final ConceptDescriptor myConceptSpecification = createDescriptorForSpecification();
  /*package*/ final ConceptDescriptor myConceptUnaryExpression = createDescriptorForUnaryExpression();
  /*package*/ final ConceptDescriptor myConceptVariable = createDescriptorForVariable();
  /*package*/ final ConceptDescriptor myConceptVariableReference = createDescriptorForVariableReference();
  /*package*/ final EnumerationDescriptor myEnumerationComparator = new EnumerationDescriptor_Comparator();
  /*package*/ final EnumerationDescriptor myEnumerationConnector = new EnumerationDescriptor_Connector();
  /*package*/ final EnumerationDescriptor myEnumerationOperator = new EnumerationDescriptor_Operator();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.aggregatedLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBinaryComparation, myConceptBinaryConnection, myConceptBinaryExpression, myConceptBinaryOperation, myConceptBooleanConstant, myConceptConstant, myConceptExpression, myConceptFloatConstant, myConceptIntegerConstant, myConceptNotOperation, myConceptPredicate, myConceptSpecification, myConceptUnaryExpression, myConceptVariable, myConceptVariableReference);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.BinaryComparation:
        return myConceptBinaryComparation;
      case LanguageConceptSwitch.BinaryConnection:
        return myConceptBinaryConnection;
      case LanguageConceptSwitch.BinaryExpression:
        return myConceptBinaryExpression;
      case LanguageConceptSwitch.BinaryOperation:
        return myConceptBinaryOperation;
      case LanguageConceptSwitch.BooleanConstant:
        return myConceptBooleanConstant;
      case LanguageConceptSwitch.Constant:
        return myConceptConstant;
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.FloatConstant:
        return myConceptFloatConstant;
      case LanguageConceptSwitch.IntegerConstant:
        return myConceptIntegerConstant;
      case LanguageConceptSwitch.NotOperation:
        return myConceptNotOperation;
      case LanguageConceptSwitch.Predicate:
        return myConceptPredicate;
      case LanguageConceptSwitch.Specification:
        return myConceptSpecification;
      case LanguageConceptSwitch.UnaryExpression:
        return myConceptUnaryExpression;
      case LanguageConceptSwitch.Variable:
        return myConceptVariable;
      case LanguageConceptSwitch.VariableReference:
        return myConceptVariableReference;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationComparator, myEnumerationConnector, myEnumerationOperator);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForBinaryComparation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "BinaryComparation", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b7L);
    b.class_(false, false, false);
    b.super_("SpecificationLogicLanguage.structure.BinaryExpression", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b0L);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963544809911");
    b.version(2);
    b.property("comparator", 0x6a7de6ab4ec961d3L).type(MetaIdFactory.dataTypeId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b8L)).origin("7673542963544809939").done();
    b.alias("binary comparason");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryConnection() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "BinaryConnection", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961e4L);
    b.class_(false, false, false);
    b.super_("SpecificationLogicLanguage.structure.BinaryExpression", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b0L);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963544809956");
    b.version(2);
    b.property("connector", 0x6a7de6ab4ec961eeL).type(MetaIdFactory.dataTypeId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961e5L)).origin("7673542963544809966").done();
    b.alias("binary connection");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "BinaryExpression", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b0L);
    b.class_(false, true, false);
    b.super_("SpecificationLogicLanguage.structure.Expression", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b6L);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963544809904");
    b.version(2);
    b.aggregate("left", 0x6a7de6ab4ec961b1L).target(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b6L).optional(false).ordered(true).multiple(false).origin("7673542963544809905").done();
    b.aggregate("right", 0x6a7de6ab4ec961b3L).target(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b6L).optional(false).ordered(true).multiple(false).origin("7673542963544809907").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "BinaryOperation", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961d5L);
    b.class_(false, false, false);
    b.super_("SpecificationLogicLanguage.structure.BinaryExpression", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b0L);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963544809941");
    b.version(2);
    b.property("operator", 0x6a7de6ab4ec961e2L).type(MetaIdFactory.dataTypeId(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961d6L)).origin("7673542963544809954").done();
    b.alias("binary operation");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "BooleanConstant", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec96ee7L);
    b.class_(false, false, false);
    b.super_("SpecificationLogicLanguage.structure.Constant", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961f1L);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963544813287");
    b.version(2);
    b.property("value", 0x6a7de6ab4ec96ee8L).type(PrimitiveTypeId.BOOLEAN).origin("7673542963544813288").done();
    b.alias("boolean");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "Constant", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961f1L);
    b.class_(false, false, false);
    b.super_("SpecificationLogicLanguage.structure.UnaryExpression", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ed21380L);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963544809969");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "Expression", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b6L);
    b.class_(false, true, false);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963544809910");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFloatConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "FloatConstant", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec96e65L);
    b.class_(false, false, false);
    b.super_("SpecificationLogicLanguage.structure.Constant", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961f1L);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963544813157");
    b.version(2);
    b.property("value", 0x6a7de6ab4ec96e66L).type(MetaIdFactory.dataTypeId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10324579ea7L)).origin("7673542963544813158").done();
    b.alias("float");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "IntegerConstant", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec96e62L);
    b.class_(false, false, false);
    b.super_("SpecificationLogicLanguage.structure.Constant", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961f1L);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963544813154");
    b.version(2);
    b.property("value", 0x6a7de6ab4ec96e63L).type(PrimitiveTypeId.INTEGER).origin("7673542963544813155").done();
    b.alias("integer");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "NotOperation", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x4c6662695c1407e7L);
    b.class_(false, false, false);
    b.super_("SpecificationLogicLanguage.structure.UnaryExpression", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ed21380L);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/5505195799162914791");
    b.version(2);
    b.aggregate("expression", 0x4c6662695c1407e8L).target(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b6L).optional(false).ordered(true).multiple(false).origin("5505195799162914792").done();
    b.alias("not");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPredicate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "Predicate", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec9613eL);
    b.class_(false, false, false);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963544809790");
    b.version(2);
    b.aggregate("expression", 0x6a7de6ab4ec9613fL).target(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b6L).optional(false).ordered(true).multiple(false).origin("7673542963544809791").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSpecification() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "Specification", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec96ef5L);
    b.class_(false, false, true);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963544813301");
    b.version(2);
    b.aggregate("predicates", 0x6a7de6ab4ec96ef6L).target(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec9613eL).optional(true).ordered(true).multiple(true).origin("7673542963544813302").done();
    b.aggregate("variables", 0x6a7de6ab4ec96ef9L).target(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec96eebL).optional(true).ordered(true).multiple(true).origin("7673542963544813305").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "UnaryExpression", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ed21380L);
    b.class_(false, true, false);
    b.super_("SpecificationLogicLanguage.structure.Expression", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961b6L);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963545379712");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "Variable", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec96eebL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963544813291");
    b.version(2);
    b.aggregate("type", 0x6a7de6ab4ec96eefL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L).optional(false).ordered(true).multiple(false).origin("7673542963544813295").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariableReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SpecificationLogicLanguage", "VariableReference", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec961f0L);
    b.class_(false, false, false);
    b.super_("SpecificationLogicLanguage.structure.UnaryExpression", 0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ed21380L);
    b.origin("r:8a7a5bef-ede0-4188-9de3-d3c48f220b5b(SpecificationLogicLanguage.structure)/7673542963544809968");
    b.version(2);
    b.associate("ref", 0x6a7de6ab4ec96ef2L).target(0x490a9af6490e4908L, 0xabde38f69766a5e3L, 0x6a7de6ab4ec96eebL).optional(false).origin("7673542963544813298").done();
    return b.create();
  }
}
