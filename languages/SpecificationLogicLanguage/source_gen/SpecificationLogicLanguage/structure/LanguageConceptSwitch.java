package SpecificationLogicLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int BinaryComparation = 0;
  public static final int BinaryConnection = 1;
  public static final int BinaryExpression = 2;
  public static final int BinaryOperation = 3;
  public static final int BooleanConstant = 4;
  public static final int Constant = 5;
  public static final int Expression = 6;
  public static final int FloatConstant = 7;
  public static final int IntegerConstant = 8;
  public static final int NotOperation = 9;
  public static final int Predicate = 10;
  public static final int Specification = 11;
  public static final int UnaryExpression = 12;
  public static final int Variable = 13;
  public static final int VariableReference = 14;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x490a9af6490e4908L, 0xabde38f69766a5e3L);
    builder.put(0x6a7de6ab4ec961b7L, BinaryComparation);
    builder.put(0x6a7de6ab4ec961e4L, BinaryConnection);
    builder.put(0x6a7de6ab4ec961b0L, BinaryExpression);
    builder.put(0x6a7de6ab4ec961d5L, BinaryOperation);
    builder.put(0x6a7de6ab4ec96ee7L, BooleanConstant);
    builder.put(0x6a7de6ab4ec961f1L, Constant);
    builder.put(0x6a7de6ab4ec961b6L, Expression);
    builder.put(0x6a7de6ab4ec96e65L, FloatConstant);
    builder.put(0x6a7de6ab4ec96e62L, IntegerConstant);
    builder.put(0x4c6662695c1407e7L, NotOperation);
    builder.put(0x6a7de6ab4ec9613eL, Predicate);
    builder.put(0x6a7de6ab4ec96ef5L, Specification);
    builder.put(0x6a7de6ab4ed21380L, UnaryExpression);
    builder.put(0x6a7de6ab4ec96eebL, Variable);
    builder.put(0x6a7de6ab4ec961f0L, VariableReference);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
